name: server-deploy to AWS ECR
on:
  pull_request:
    types:
        - closed
    branches:
      - main
env:
  AWS_REGION: ap-northeast-2
  ECR_REGISTRY: 975049923363.dkr.ecr.ap-northeast-2.amazonaws.com
  ECR_REPOSITORY: daeng-daeng-ecr
  EC2_IP_ADDRESS: ${{ secrets.EC2_IP_ADDRESS }}

jobs:
  deploy:
    if: ${{ github.event.pull_request.merged }}
    name: Deploy
    runs-on: ubuntu-latest
    environment: production
  
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          
      - name: Start Redis
        uses: supercharge/redis-github-action@1.1.0
        with:
          redis-version: 6

      - name: Build with Gradle
        run: ./gradlew clean build --info
        env:
          MYSQL_PWD : mysecretpassword
          GOOGLE_OAUTH_ID : google-client-id-example
          GOOGLE_OAUTH_SECRET : google-oauth-secret-example
          KAKAO_OAUTH_ID : kakao-oauth-id-example
          KAKAO_OAUTH_SECRET : kakao-oauth-secret-example
          KAKAO_REST_API_KEY : kakao-rest-api-key-example
          MYSQL_DOMAIN : mysql.example.com
          REDIS_DOMAIN : redis.example.com
          REDIS_PWD : redis-password-example
          DOMAIN : localhost
          SECURITY_SECRET : testSecretKey20230327testSecretKey20230327testSecretKey20230327
          AWS_ACCESS_KEY : AWS-ACCESS-KEY
          AWS_SECRET_KEY : AWS-SECRET-KEY
          AWS_S3_BUCKET : AWS-S3-BUCKET
          AWS_S3_URL : AWS-S3-URL
          FRONTEND_URL : FRONTEND-URL
          TEST : true
          HOST : localhost

      - name: Get Public IP
        id: ip
        uses: haythem/public-ip@v1.3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Add GitHub Actions IP
        run: |
          aws ec2 authorize-security-group-ingress \
              --group-id ${{ secrets.SECURITY_GROUP_ID }} \
              --protocol tcp \
              --port 22 \
              --cidr ${{ steps.ip.outputs.ipv4 }}/32
  
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
  
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
  
        run: |
          docker build -t daeng-daeng-ecr .
          docker tag daeng-daeng-ecr:latest 975049923363.dkr.ecr.ap-northeast-2.amazonaws.com/daeng-daeng-ecr:latest
          docker push 975049923363.dkr.ecr.ap-northeast-2.amazonaws.com/daeng-daeng-ecr:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:latest"
  
      - name: Deploy on EC2 instance
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_IP_ADDRESS }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws configure set region ${{ env.AWS_REGION }}
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}
            sudo docker stop $(sudo docker ps -a --filter "ancestor=975049923363.dkr.ecr.ap-northeast-2.amazonaws.com/daeng-daeng-ecr:latest" --format "{{.ID}}") || true
            sudo docker rm $(sudo docker ps -a --filter "ancestor=975049923363.dkr.ecr.ap-northeast-2.amazonaws.com/daeng-daeng-ecr:latest" --format "{{.ID}}") || true
            sudo docker pull ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest
            sudo docker run -d --name daengdaeng -p 8080:8080 --net host \
            -e MYSQL_PWD=${{secrets.MYSQL_PWD}} \
            -e SPRING_PROFILES_ACTIVE=default \
            -e GOOGLE_OAUTH_ID=${{secrets.GOOGLE_OAUTH_ID}} \
            -e GOOGLE_OAUTH_SECRET=${{secrets.GOOGLE_OAUTH_SECRET}} \
            -e KAKAO_OAUTH_ID=${{secrets.KAKAO_OAUTH_ID}} \
            -e KAKAO_OAUTH_SECRET=${{secrets.KAKAO_OAUTH_SECRET}} \
            -e KAKAO_REST_API_KEY=${{secrets.KAKAO_REST_API_KEY}} \
            -e MYSQL_DOMAIN=${{secrets.MYSQL_DOMAIN}} \
            -e REDIS_DOMAIN=${{secrets.REDIS_DOMAIN}} \
            -e REDIS_PWD=${{secrets.REDIS_PWD}} \
            -e SECURITY_SECRET=${{secrets.SECURITY_SECRET}} \
            -e DOMAIN=${{secrets.EC2_DNS_ADDRESS}} \
            -e AWS_ACCESS_KEY=${{secrets.AWS_ACCESS_KEY_ID}} \
            -e AWS_SECRET_KEY=${{secrets.AWS_SECRET_ACCESS_KEY}} \
            -e AWS_S3_BUCKET=${{secrets.AWS_S3_BUCKET}} \
            -e AWS_S3_URL=${{secrets.AWS_S3_URL}} \
            -e OPENAI_API_KEY=${{secrets.OPENAI_API_KEY}} \
            -e FRONTEND_URL=${{secrets.FRONTEND_URL}} \
            -e TEST=false \
            -e HOST=${{secrets.HOST}} \
            975049923363.dkr.ecr.ap-northeast-2.amazonaws.com/daeng-daeng-ecr:latest

      - name: Remove GitHub Actions IP
        run: |
          aws ec2 revoke-security-group-ingress \
              --group-id ${{ secrets.SECURITY_GROUP_ID }} \
              --protocol tcp \
              --port 22 \
              --cidr ${{ steps.ip.outputs.ipv4 }}/32
      

      - name: action-slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          author_name: Sloth Backend - dev
          fields: repo,commit,message,author
          mention: here #멘션할 대상 지정
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
